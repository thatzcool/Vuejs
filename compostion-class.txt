옵션스 API : 초기 버전 부터 사용된 API  
            접근 방식이 객체 방식 

컴포지션 API : Vue3 부터 새로 구성된 기능 
              함수기반 접근 방식을 취하고 있음 
              개발자가 관련된 기능별로 코드를 구성하여 구현이 용이
           

       방법 :  1. setup() 훅 
              2. 설탕문법을 사용 
                프로그래밍 언어나 프레임워크에서 제공되는 문법을 간편하게 사용할 수 있도록 쉬운 형식으로 제공하는 문법을 통칭하는 용어

                애플리케이션의 반응성과 조직성을 개선하기 위해 여러 요소를 제공한다. 


 3. 반응형 데이터 정의 
    뷰에서는 컴포넌트 전번에서 사용하는 데이커(값)을 정의하기 위해 데이터 정의 방법을 제공한다. 

    ref() : 컴포지션 API 에서 ref() 어떤 값을 사용하여 반응형 데이터를 정의한다. 
            값 자체의 변경 사항에만 반응성을 유지하므로 arr1 은 값이 변경되지만, arr2 는 변화감지를 못해 아무 변화가 없다. 
            객체나 배열의 값 자체가 아니라 내부 속성이나 요소가 변경됐을때는 반응성을 유지하지 않는다. 

    reactive() :   생성할 수 있는 반응형 데이터는 객체나 배열과 같은 참조 자료형만 가능하다. 


4. 
옵션스API에서는 <template></templage> 태그의 DOM 요소에 접근하려면
$refs (전역속성)을 사용해야 한다. 

5. 계산된 속성 
   뷰에서는 어플리케이션 성능을 향상시키기 위해 자주 사용하는 데이터를 캐시하는 계산된 속성을 제공한다.
   옵션스 api 에서는 computed 옵션 속성을 이용하였는데, 컴포지션API에서는 computed() 함수를 제공한다. 

6. 감시자 속성 
뷰에서는 반응형으로 선언된 데이터 값이 변경됐을때,
어떠한 동작을 하는 코드를 작성해야 한다면 감시자 속성을 사용하여 관리할 수 있다. 
옵션스 API에서는 watch 옵션 속성을 사용하는데
컴포지션 API에서는 watch() , watchEffect() 함수를 사용한다. 

-watch() 
-watchEffect() : 콜백함수 내부에서 참조하는 모든 반응형 데이터를 감시한다.  옵셥스api에는 없는기능이다.

